#############################################################################
# samples/makefile-samples.nvmk
#
# Notes:
#
# This makefile exports the following lists:
#
#   SAMPLES_CPP_SOURCES
#   SAMPLES_CU_SOURCES
#   SAMPLES_OBJECTS
#   SAMPLES_TARGETS
#
# Rules are defined (either implicitly from the nvmake standard
# library, or explicitly within this makefile) for compiling
# SAMPLES_*_SOURCES to SAMPLES_OBJECTS, and for linking
# SAMPLES_TARGETS.
#
# The nvmake-standard SOURCES is populated to contain everything from
# SAMPLES_CPP_SOURCES.
#
# The nvmake-standard OBJECTS is populated to contain everything from
# SAMPLES_OBJECTS.
#
# This makefile exports a list of targets in SAMPLES_TARGETS. It
# defines recipes for building the targets. The expectation is that
# the makefile which includes this one adds SAMPLES_TARGETS to the
# list of makefile goals.
#
#############################################################################

ifeq ($(findstring $(NV_BUILD_TYPE),"debug release"),)
  $(error Only release and debug builds are supported)
endif

ifeq ($(findstring $(NV_TARGET_ARCH),"amd64"),)
  $(error Only x64 (a.k.a amd64) target architecture is supported)
endif

# Only WDDM versions of Windows OS are supported
ifneq ($(NV_IS_WDDM),1)
  $(error Unsupported NV_TARGET_OS $(NV_TARGET_OS). Linux support is planned but not implemented yet.)
endif

ifdef NVCFG_INITIALIZED
  ############################################################
  # Common sources

  # samples_common_cpp_sources += $(NV_SOURCE)/samples/common/BatchStream.cpp
  # SOURCES += $(samples_common_cpp_sources)
  # samples_common_objects += $(call BUILD_OBJECT_LIST,$(samples_common_cpp_sources))
  # SAMPLES_OBJECTS += $(samples_common_objects)
  # $(samples_common_objects): $(NV_SOURCE)/samples/makefile-samples.nvmk
  #$(samples_common_objects): NV_DEFINES += _SCL_SECURE_NO_WARNINGS

  ############################################################
  # C++ compiler flags

  ifeq ($(NV_TARGET_OS_FAMILY),Windows)
    SAMPLES_INCLUDES += $(MSVC_COMPILER_DIR)/include
    SAMPLES_INCLUDES += $(NV_WDKSDK_INC)/shared
    SAMPLES_INCLUDES += $(NV_WDKSDK_INC)/um
    SAMPLES_INCLUDES += $(NV_WDKSDK_INC)/km
  endif

  SAMPLES_INCLUDES += $(cuda_toolkit)/include
  SAMPLES_INCLUDES += $(cuda_toolkit)/include/nvtx3 # for nvToolsExt.h
  SAMPLES_INCLUDES += $(cudnn)/include
  SAMPLES_INCLUDES += $(NV_SOURCE)/include # for NVINFER
  SAMPLES_INCLUDES += $(NV_SOURCE)/builder # for internalAPI.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/rtExt # for internalAPIENGINE.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/rtExt/cuda # for internalAPIENGINE.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/rtSafe
  SAMPLES_INCLUDES += $(NV_SOURCE)/rtSafe/cuda
  SAMPLES_INCLUDES += $(NV_SOURCE)/common # for helpers.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/samples/common # for helpers.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/samples/common/windows # for getopt.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/parsers/uff # for UFFParser.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/parsers/onnxOpenSource # for nvOnnxParser.h
  SAMPLES_INCLUDES += $(NV_SOURCE)/plugin

  ifeq ($(NV_TARGET_OS_FAMILY),Windows)

    SAMPLES_DEFINES += _CONSOLE

    # Permit "unsafe" string functions
    SAMPLES_DEFINES += _CRT_SECURE_NO_WARNINGS

    # Conversion warnings
    SAMPLES_CFLAGS += -wd4267
    SAMPLES_CFLAGS += -wd4244
    SAMPLES_CFLAGS += -wd4715
    SAMPLES_CFLAGS += -wd4700
    SAMPLES_CFLAGS += -wd4305
    SAMPLES_CFLAGS += -wd4838

    # Unrecognized escape sequence "%"
    SAMPLES_CFLAGS += -wd4129

  endif

  #############################################################################
  # Dependency on nvinfer

  ifdef NVINFER_IMPORT_LIBRARY
    # This makefile has been included by a makefile that builds
    # nvinfer import library.
    samples_path_to_nvinfer_import_library = $(NVINFER_IMPORT_LIBRARY)
  else
    # This makefile has been included by a makefile that does not also
    # build nvinfer's import library.
    #
    # As a HACK, cross fingers and try to find an nvinfer import
    # library in a nearby directory.
    $(warning debug message - samples is guessing location of the nvinfer import library (NVINFER_IMPORT_LIBRARY is not defined))
    samples_path_to_nvinfer_import_library = $(NV_SOURCE)/nvmake/$(OUTPUTDIR)/nvinfer.lib
  endif
  $(info debug message - samples is using nvinfer import library: $(samples_path_to_nvinfer_import_library))

  SAMPLES_PREREQUISITES += $(samples_path_to_nvinfer_import_library)

  #############################################################################
  # Dependency on nvparsers

  ifdef PARSERS_IMPORT_LIBRARY
    # This makefile has been included by a makefile that builds
    # nvparsers import library.
    samples_path_to_nvparsers_import_library = $(PARSERS_IMPORT_LIBRARY)
  else
    # This makefile has been included by a makefile that does not also
    # build nvparsers' import library.
    #
    # As a HACK, cross fingers and try to find an nvparsers import
    # library in a nearby directory.
    $(warning debug message - samples is guessing location of the nvparsers import library (PARSERS_IMPORT_LIBRARY is not defined))
    samples_path_to_nvparsers_import_library = $(NV_SOURCE)/nvmake/$(OUTPUTDIR)/nvparsers.lib
  endif
  $(info debug message - samples is using nvparsers import library: $(samples_path_to_nvparsers_import_library))

  SAMPLES_PREREQUISITES += $(samples_path_to_nvparsers_import_library)

  #############################################################################
  # Dependency on nvplugins

  ifdef PLUGIN_IMPORT_LIBRARY
    # This makefile has been included by a makefile that builds
    # nvinfer_plugin import library.
    samples_path_to_nvinfer_plugin_import_library = $(PLUGIN_IMPORT_LIBRARY)
  else
    # This makefile has been included by a makefile that does not also
    # build nvinfer_plugin' import library.
    #
    # As a HACK, cross fingers and try to find an nvinfer_plugin import
    # library in a nearby directory.
    $(warning debug message - samples is guessing location of the nvinfer_plugin import library (PLUGIN_IMPORT_LIBRARY is not defined))
    samples_path_to_nvinfer_plugin_import_library = $(NV_SOURCE)/nvmake/$(OUTPUTDIR)/nvinfer_plugin.lib
  endif
  $(info debug message - samples is using nvinfer_plugin import library: $(samples_path_to_nvinfer_plugin_import_library))

  SAMPLES_PREREQUISITES += $(samples_path_to_nvinfer_plugin_import_library)
 
  #############################################################################
  # Dependency on onnxparser

  ifdef NVONNXPARSER_IMPORT_LIBRARY
    # This makefile has been included by a makefile that builds
    # nvonnxparser import library.
    samples_path_to_nvonnxparser_import_library += $(NVONNXPARSER_IMPORT_LIBRARY)
  else
    # This makefile has been included by a makefile that does not also
    # build nvinfer_plugin' import library.
    #
    # As a HACK, cross fingers and try to find an nvinfer_plugin import
    # library in a nearby directory.
    $(warning debug message - samples is guessing location of nvonnxparser import library (NVONNXPARSER_IMPORT_LIBRARY is not defined))
    samples_path_to_nvonnxparser_import_library = $(NV_SOURCE)/nvmake/$(OUTPUTDIR)/nvonnxparser.lib
  endif
  $(info debug message - samples is using nvonnxparserimport library: $(samples_path_to_nvonnxparser_import_library))
  SAMPLES_PREREQUISITES += $(samples_path_to_nvonnxparser_import_library)


  #############################################################
  # Linker Flags

  ifeq ($(NV_TARGET_OS_FAMILY),Windows)
    ifeq ($(NV_TARGET_ARCH),x86)
      samples_compiler_lib = lib
    else ifeq ($(NV_TARGET_ARCH),amd64)
      samples_compiler_lib = lib/amd64
    else
      $(error Unsupported NV_TARGET_ARCH $(NV_TARGET_ARCH))
    endif

    samples_library_dirs += $(NV_WDKSDK_LIB)/um/$(NV_WDKSDK_LIB_CPU)
    samples_library_dirs += $(MSVC_COMPILER_DIR)/$(samples_compiler_lib)
  endif

  samples_library_dirs += $(cuda_toolkit)/lib/x64
  samples_library_dirs += $(cudnn)/lib/x64
  NV_REQUIRED_DIRS += $(samples_library_dirs)

  SAMPLES_LIBRARIES += cudnn.lib
  SAMPLES_LIBRARIES += cublas.lib
  SAMPLES_LIBRARIES += cudart.lib
  SAMPLES_LIBRARIES += $(samples_path_to_nvparsers_import_library)
  SAMPLES_LIBRARIES += $(samples_path_to_nvinfer_plugin_import_library)
  SAMPLES_LIBRARIES += $(samples_path_to_nvinfer_import_library)
  SAMPLES_LIBRARIES += $(samples_path_to_nvonnxparser_import_library)


  # Start with flags that come from nvmake standard library
  SAMPLES_LFLAGS += $(LFLAGS)

  ifeq ($(NV_TARGET_OS_FAMILY),Windows)

    # Treat linker warnings as errors
    SAMPLES_LFLAGS += -WX

    # Building a console application
    SAMPLES_LFLAGS += -subsystem:console

    SAMPLES_LFLAGS += -INCREMENTAL:NO

    ifeq ($(NV_BUILD_TYPE),release)
      # Fix ability to debug usermode stack frames from the kernel debugger
      SAMPLES_LFLAGS += -opt:ref
      SAMPLES_LFLAGS += -opt:icf
    endif

    # Turn on this flag when debugging linker error such as duplicate symbol definitions.
    # SAMPLES_LFLAGS += -verbose:lib

  endif

  SAMPLES_LFLAGS += $(addprefix -libpath:,$(samples_library_dirs))

  ############################################################
  # Recipes

  # $(1) - name of target to link
  ifeq ($(NV_TARGET_OS_FAMILY),Windows)
    define SAMPLES_MAKE_LINK_RECIPE
      $(1):
	@$(ECHO) Begin linking $$@
	-$(RM) $$(addsuffix .pdb,$$(basename $$@))
	$$(file >$(OUTPUTDIR)/$$(LINKER_PARAMETERS_FILE), $$(LINKER_FLAGS))
	$$(call call_linker_print_params_on_verbose,$(OUTPUTDIR_ABSOLUTE)/$$(LINKER_PARAMETERS_FILE))
	$(LINK) @$(OUTPUTDIR)/$$(LINKER_PARAMETERS_FILE)
	@$(ECHO) Done linking $$@

      # Teach make that the .pdb is created by link
      $$(eval $$(call NV_TARGET_ALSO_UPDATES_RULE,$(1),$(addsuffix .pdb,$(basename $(1)))))

      # Perform source-indexing post-process on the .pdb
      $$(eval $$(call source_index_pdb,$(1)))

    endef
  else
    $(error SAMPLES_MAKE_LINK_RECIPE is not supported on this build host)
  endif

  ############################################################
  # Internal plugin objects, link directly. Needed for internal samples.

  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/allClassNMS.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/batchedNMSPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/batchedNMSInference.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/bboxDeltas2Proposals.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/checkMacros.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/clip.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/clipPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/common.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/decodeBBoxes.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/detectionForward.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/extractFgScores.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/gatherNMSOutputs.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/gatherTopDetections.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/generateAnchors.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/gridAnchorPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/InferPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/nmsHelper.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/nmsLayer.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/nmsPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/normalizeLayer.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/normalizePlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/NvPluginFasterRCNN.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/NvPluginSSD.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/nvPluginsLegacy.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/permuteData.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/permuteLayer.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/lReLU.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/lReluPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/priorBoxLayer.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/priorBoxPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/proposalsForward.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/reducedMath.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/regionForward.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/regionPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/reorgForward.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/reorgPlugin.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/roiPooling.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/rproiInferenceFused.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/sortScoresPerClass.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/sortScoresPerImage.obj
  INTERNAL_PLUGIN_OBJECTS += $(UNITTEST_PLUGIN_DIR)/vocEvaluate.obj

  ############################################################
  # Build lists of SOURCES and OBJECTS and targets

  samples_list     += sampleBigLSTM             
  samples_list     += sampleCharRNN
  samples_list     += sampleFasterRCNN
  samples_list     += sampleGoogleNet           
  samples_list     += sampleINT8
  samples_list     += sampleMLP
  samples_list     += sampleMNIST               
  samples_list     += sampleMNISTAPI
  samples_list     += sampleMovieLens
  samples_list_bad += sampleMovieLensMPS        # not tested nor shipped
  samples_list     += sampleNMT                 
  samples_list     += sampleONNX                
  samples_list     += sampleOnnxMNIST           
  samples_list     += samplePlugin
  samples_list     += sampleRNNPerf
  samples_list     += sampleRNNv2
  samples_list     += sampleSSD                 
  samples_list     += sampleUff
  samples_list     += sampleUffMNIST
  samples_list     += sampleUffPlugin
  samples_list     += sampleINT8API          	
  samples_list     += sampleUffSSD              
  samples_list     += sampleYOLO                
  samples_list     += sampleYOLOv2          
  samples_list     += trtexec

  $(foreach sample,$(samples_list), \
    $(foreach makefile,$(NV_SOURCE)/samples/$(sample)/makefile-$(sample).nvmk, \
      $(eval include $(makefile))))

  $(SAMPLES_OBJECTS): NV_INCLUDES += $(SAMPLES_INCLUDES)
  $(SAMPLES_OBJECTS): NV_DEFINES += $(SAMPLES_DEFINES)
  $(SAMPLES_OBJECTS): NV_DEFINES += _SCL_SECURE_NO_WARNINGS
  $(SAMPLES_OBJECTS): CFLAGS += $(SAMPLES_CFLAGS)

  # Automatically rebuild after changing this makefile
  $(SAMPLES_OBJECTS): $(NV_SOURCE)/samples/makefile-samples.nvmk

  ############################################################
  # Targets

  define SAMPLES_MAKE_PDB_NAME
    $(addsuffix .pdb,$(basename $(1)))
  endef

  # This is used by DVS, and it can be convenient for scripting.
  ifeq ($(NV_DO_INSTALL),1)
    samples_install_targets := $(addprefix $(NV_INSTALL_DIR)/,$(notdir $(SAMPLES_TARGETS)))
    ifeq ($(NV_GEN_PDB),1)
      samples_symbol_targets := $(addprefix $(NV_SYMBOL_DIR)/,$(call SAMPLES_MAKE_PDB_NAME,$(SAMPLES_TARGETS)))
      SAMPLES_TARGETS += $(samples_symbol_targets)
    endif
    SAMPLES_TARGETS += $(samples_install_targets)
  endif

endif # NVCFG_INITIALIZED

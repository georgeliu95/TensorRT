#############################################################################
# makefile-vfc-plugin.nvmk
#
# Notes:
#
# This makefile exports the following lists:
#
#   VFC_PLUGIN_CPP_SOURCES
#   VFC_PLUGIN_CU_SOURCES
#   VFC_PLUGIN_OBJECTS
#   VFC_PLUGIN_TARGETS
#
# Rules are defined (either implicitly from the nvmake standard
# library, or explicitly within this makefile) for compiling
# PLUGIN_*_SOURCES to VFC_PLUGIN_OBJECTS, and for linking VFC_PLUGIN_TARGETS.
#
# The nvmake-standard SOURCES is populated to contain everything from
# VFC_PLUGIN_CPP_SOURCES.
#
# The nvmake-standard OBJECTS is populated to contain everything from
# VFC_PLUGIN_OBJECTS.
#
# This makefile exports a list of targets in VFC_PLUGIN_TARGETS. It
# defines recipes for building the targets. The expectation is that
# the makefile which includes this one adds VFC_PLUGIN_TARGETS to the
# list of makefile goals.
#
#############################################################################

ifeq ($(findstring $(NV_BUILD_TYPE),"debug release"),)
  $(error Only release and debug builds are supported)
endif

ifeq ($(findstring $(NV_TARGET_ARCH),"amd64"),)
  $(error Only x64 (a.k.a amd64) target architecture is supported)
endif

# Only WDDM versions of Windows OS are supported
ifneq ($(NV_IS_WDDM),1)
  $(error Unsupported NV_TARGET_OS $(NV_TARGET_OS). Linux support is planned but not implemented yet.)
endif

VFC_PLUGIN_BASENAME = nvinfer_vc_plugin

ifeq ($(NV_TARGET_OS_FAMILY),Windows)
  VFC_PLUGIN_TARGETS += $(OUTPUTDIR)/$(VFC_PLUGIN_BASENAME).dll

  VFC_PLUGIN_IMPORT_LIBRARY = $(OUTPUTDIR)/$(VFC_PLUGIN_BASENAME).lib
  VFC_PLUGIN_TARGETS += $(VFC_PLUGIN_IMPORT_LIBRARY)

  # This is used by DVS, and it can be convenient for scripting.
  ifeq ($(NV_DO_INSTALL),1)
    VFC_PLUGIN_TARGETS += $(NV_INSTALL_DIR)/$(VFC_PLUGIN_BASENAME).dll
    VFC_PLUGIN_TARGETS += $(NV_INSTALL_DIR)/$(VFC_PLUGIN_BASENAME).lib
    ifeq ($(NV_GEN_PDB),1)
      VFC_PLUGIN_TARGETS += $(NV_SYMBOL_DIR)/$(VFC_PLUGIN_BASENAME).pdb
    endif
  endif
endif

ifdef NVCFG_INITIALIZED

PLUGIN_SOURCE_DIR = $(NV_SOURCE)/plugin/

vfc_plugins := \
	common \
	roiAlignPlugin

  ############################################################
  # Build lists of SOURCES and OBJECTS

  BUILD_VFC_OBJECT_LIST = \
  $(addprefix $(OUTPUTDIR)/,\
    $(call MAYBE_FLATTEN_OUTPUTDIR_TRT,\
      $(addsuffix .plugin.vfc$(OBJSUFFIX),$(basename $(1)))))

  VFC_PLUGIN_CPP_SOURCES += $(wildcard $(PLUGIN_SOURCE_DIR)*.cpp)
  VFC_PLUGIN_CPP_SOURCES += $(foreach plugin,$(vfc_plugins), $(wildcard $(PLUGIN_SOURCE_DIR)/$(plugin)/*.cpp))

  VFC_PLUGIN_CPP_OBJECTS += $(call BUILD_VFC_OBJECT_LIST,$(VFC_PLUGIN_CPP_SOURCES))
  VFC_PLUGIN_OBJECTS += $(VFC_PLUGIN_CPP_OBJECTS)

  VFC_PLUGIN_CU_SOURCES += $(wildcard $(PLUGIN_SOURCE_DIR)*.cu)
  VFC_PLUGIN_CU_SOURCES += $(foreach plugin,$(vfc_plugins), $(wildcard $(PLUGIN_SOURCE_DIR)/$(plugin)/*.cu))

  VFC_PLUGIN_CU_OBJECTS += $(call BUILD_VFC_OBJECT_LIST, $(VFC_PLUGIN_CU_SOURCES))
  VFC_PLUGIN_OBJECTS += $(VFC_PLUGIN_CU_OBJECTS)
  OBJECTS += $(VFC_PLUGIN_CU_OBJECTS)

  # Base plugin include directories
  VFC_PLUGIN_BASE_INCLUDES := $(foreach plugin,$(vfc_plugins),  $(PLUGIN_SOURCE_DIR)/$(plugin))

  # Automatically rebuild objects after changing this makefile
  $(VFC_PLUGIN_OBJECTS): $(NV_SOURCE)/plugin/makefile-vfc-plugin.nvmk

  ############################################################
  # Set misc stuff

  # Windows alternative to the unix-specific defines.inc
  include $(NV_SOURCE)/nvmake/makefile-defines.nvmk

  ############################################################
  # C++ compiler flags

  $(foreach src,$(VFC_PLUGIN_CPP_SOURCES), \
    $(foreach obj, $(call BUILD_VFC_OBJECT_LIST, $(src)), \
      $(eval $(call NV_OBJECT_FROM_SOURCE_RULE, $(src), $(obj)))))

  VFC_PLUGIN_INCLUDES += ${VFC_PLUGIN_BASE_INCLUDES}
  VFC_PLUGIN_INCLUDES += ${NV_WDKSDK_INC}/shared
  VFC_PLUGIN_INCLUDES += ${NV_WDKSDK_INC}/um
  VFC_PLUGIN_INCLUDES += $(cuda_toolkit)/include
  VFC_PLUGIN_INCLUDES += $(NV_SOURCE)
  VFC_PLUGIN_INCLUDES += $(NV_SOURCE)/plugin
  VFC_PLUGIN_INCLUDES += $(NV_SOURCE)/plugin/common
  VFC_PLUGIN_INCLUDES += $(NV_SOURCE)/externals
  VFC_PLUGIN_INCLUDES += $(NV_SOURCE)/include

  VFC_PLUGIN_DEFINES += $(COMMON_DEFINES)
  VFC_PLUGIN_DEFINES += PROTOBUF_TARGET_x86_64
  VFC_PLUGIN_DEFINES += TRT_CUDA_ENABLE_HMMA
  VFC_PLUGIN_DEFINES += ENABLE_DLA=0
  VFC_PLUGIN_DEFINES += ENABLE_CASK
  VFC_PLUGIN_DEFINES += TENSORRT_BUILD_LIB
  VFC_PLUGIN_DEFINES += _SCL_SECURE_NO_WARNINGS

  VFC_PLUGIN_CFLAGS += $(COMMON_CFLAGS)
  VFC_PLUGIN_CFLAGS += -DCOMPILE_VFC_PLUGIN=1

  ifeq ($(NV_TARGET_OS_FAMILY),Windows)

    # https://nvbugs/3453249
    VFC_PLUGIN_CFLAGS += -wd4068

  endif

  NV_REQUIRED_DIRS += $(VFC_PLUGIN_INCLUDES)
  $(VFC_PLUGIN_OBJECTS): NV_INCLUDES += $(VFC_PLUGIN_INCLUDES)
  $(VFC_PLUGIN_OBJECTS): NV_DEFINES += $(VFC_PLUGIN_DEFINES)
  $(VFC_PLUGIN_OBJECTS): CFLAGS += $(VFC_PLUGIN_CFLAGS)

  ############################################################
  # NVCC compiler flags

  $(foreach src,$(VFC_PLUGIN_CU_SOURCES), \
    $(foreach obj, $(call BUILD_VFC_OBJECT_LIST, $(src)), \
      $(eval $(call NV_OBJECT_FROM_SOURCE_RULE_CU, $(src), $(obj)))))

  VFC_PLUGIN_NVCC_FLAGS += -use_fast_math
  VFC_PLUGIN_NVCC_FLAGS += -Xfatbin
  VFC_PLUGIN_NVCC_FLAGS += -compress-all

  VFC_PLUGIN_NVCC_FLAGS += -DTRT_CUDA_ENABLE_HMMA

  ifeq ($(NV_TARGET_OS_FAMILY),Unix)
    # These options are not supported when running on windows using msvc
    VFC_PLUGIN_NVCC_FLAGS += -std=c++14
    VFC_PLUGIN_NVCC_FLAGS += -D_GLIBCXX_USE_CXX11_ABI=0
    VFC_PLUGIN_NVCC_FLAGS += --compiler-options=-fPIC
  endif

  VFC_PLUGIN_NVCC_FLAGS += -I$(MSVC_COMPILER_DIR)/include
  VFC_PLUGIN_NVCC_FLAGS += -I$(MSVC_COMPILER_DIR)/../ucrt/include
  ifeq ($(NV_TARGET_OS_FAMILY),Windows)
    VFC_PLUGIN_NVCC_FLAGS += -I$(strip $(subst bin/nvcc.exe,,$(NVCC)))/include
  endif
  VFC_PLUGIN_NVCC_FLAGS += -I$(NV_SOURCE)
  VFC_PLUGIN_NVCC_FLAGS += -I$(NV_SOURCE)/include
  VFC_PLUGIN_NVCC_FLAGS += -I$(NV_SOURCE)/plugin

  ifneq ($(TOOLKIT_CUB_EXIST), 1)
      VFC_PLUGIN_NVCC_FLAGS += -I$(CUB_INCLUDE)
  endif
  VFC_PLUGIN_DEFINES += $(foreach sm,$(SMS),ENABLE_SM$(sm))


  #ifeq ($(GENCODES),)
    # Generate SASS code for each SM architecture listed in $(SMS)
    $(foreach sm,$(SMS),$(eval VFC_PLUGIN_GENCODES += -gencode arch=compute_$(sm),code=sm_$(sm)))

    # Generate PTX code to guarantee forward-compatibility
    ifneq ($(GEN_PTX_SM),)
      VFC_PLUGIN_GENCODES += -gencode arch=compute_$(GEN_PTX_SM),code=compute_$(GEN_PTX_SM)
    endif

    VFC_PLUGIN_NVCC_FLAGS += $(VFC_PLUGIN_GENCODES)

    ifeq ($(INCLUDE_MMA_KERNELS), 1)
      ifeq (,$(findstring --ext-desc-file,$(VFC_PLUGIN_NVCC_FLAGS)))
        VFC_PLUGIN_NVCC_FLAGS += -Xptxas="--ext-desc-file $(PTX_DESC_FILE)"
      endif
    endif

  #endif

  # Need to filter out some CFLAGS that NVCC automatically adds to
  # cl.exe command line, but adds slightly differently than the
  # corresponding flag that is already present in CFLAGS. This
  # behavior from NVCC is annoying.
  #
  # Note that the use of $(filter-out) means this workaround has to be
  # done after all additions to CFLAGS are complete. Otherwise a thing
  # added to CFLAGS after this point will not get into
  # CFLAGS_for_NVCC.
  #
  # Problem
  #   cl : Command line warning D9025 : overriding '/Fo_out/debug/' with '/Fo_out/debug/volta_hcudnn_big.obj'
  # Workaround
  #   The former is from CFLAGS, the latter is auto-added by
  #   NVCC. Filter out the former.

  VFC_PLUGIN_NVCC_BAD_FLAGS += -Fo$(OUTPUTDIR)/
  PLUGIN_CFLAGS_for_NVCC = $(filter-out $(VFC_PLUGIN_NVCC_BAD_FLAGS),$(CFLAGS) $(VFC_PLUGIN_CFLAGS))
  VFC_PLUGIN_NVCC_FLAGS += $(addprefix --compiler-options=,$(PLUGIN_CFLAGS_for_NVCC))

  $(VFC_PLUGIN_CU_OBJECTS): NVCC_FLAGS += $(VFC_PLUGIN_NVCC_FLAGS)

  #############################################################################
  # Dependency on nvinfer

  ifdef NVINFER_IMPORT_LIBRARY
    # This makefile has been included by a makefile that builds
    # nvinfer import library.
    PLUGIN_PATH_TO_NVINFER_IMPORT_LIBRARY = $(NVINFER_IMPORT_LIBRARY)
  else
    # This makefile has been included by a makefile that does not also
    # build nvinfer's import library.
    #
    # As a HACK, cross fingers and try to find an nvinfer import
    # library in a nearby directory.
    $(warning debug message - plugin is guessing location of the nvinfer import library (NVINFER_IMPORT_LIBRARY is not defined))
    PLUGIN_PATH_TO_NVINFER_IMPORT_LIBRARY = $(NV_SOURCE)/nvmake/$(OUTPUTDIR)/nvinfer.lib
  endif
  $(info debug message - plugin is using nvinfer import library: $(PLUGIN_PATH_TO_NVINFER_IMPORT_LIBRARY))

  VFC_PLUGIN_PREREQUISITES += $(PLUGIN_PATH_TO_NVINFER_IMPORT_LIBRARY)

  ############################################################
  # Resource compiler

  ############################################################
  # Linker flags

  ifeq ($(NV_TARGET_ARCH),x86)
    vfc_plugin_compiler_lib = lib
  else ifeq ($(NV_TARGET_ARCH),amd64)
    vfc_plugin_compiler_lib = lib/amd64
  else
      $(error Unsupported NV_TARGET_ARCH $(NV_TARGET_ARCH))
  endif

  vfc_plugin_library_dirs += $(NV_WDKSDK_LIB)/um/$(NV_WDKSDK_LIB_CPU)
  vfc_plugin_library_dirs += $(MSVC_COMPILER_DIR)/$(vfc_plugin_compiler_lib)
  vfc_plugin_library_dirs += $(cuda_toolkit)/lib/x64
  NV_REQUIRED_DIRS += $(vfc_plugin_library_dirs)

  vfc_plugin_libraries += cudart_static.lib

  vfc_plugin_libraries += $(PLUGIN_PATH_TO_NVINFER_IMPORT_LIBRARY)

  # Start with flags that come from nvmake standard library
  VFC_PLUGIN_LFLAGS += $(LFLAGS)

  VFC_PLUGIN_LFLAGS += -WX
  VFC_PLUGIN_LFLAGS += -subsystem:console

  VFC_PLUGIN_LFLAGS += -INCREMENTAL:NO

  ifeq ($(NV_BUILD_TYPE),release)
    # Fix ability to debug usermode stack frames from the kernel debugger
    VFC_PLUGIN_LFLAGS += -opt:ref
    VFC_PLUGIN_LFLAGS += -opt:icf
  endif

  VFC_PLUGIN_LFLAGS += $(addprefix -libpath:,$(vfc_plugin_library_dirs))

  # Turn on this flag when debugging linker error such as duplicate symbol definitions.
  # NVINFER_LFLAGS += -verbose:lib

  ############################################################
  # Recipes

  ifeq ($(NV_TARGET_OS_FAMILY),Windows)
    VFC_PLUGIN_LINK_PARAMETERS_FILE = linkParameters-$(VFC_PLUGIN_BASENAME).txt

    VFC_PLUGIN_PREREQUISITES += $(VFC_PLUGIN_OBJECTS)

    vfc_plugin_linker_flags += -DLL
    vfc_plugin_linker_flags += $(strip $(VFC_PLUGIN_LFLAGS))
    vfc_plugin_linker_flags += $(vfc_plugin_libraries)
    vfc_plugin_linker_flags += $(VFC_PLUGIN_OBJECTS)
    vfc_plugin_linker_flags += -out:$@

    $(OUTPUTDIR)/$(VFC_PLUGIN_BASENAME).dll: $(VFC_PLUGIN_PREREQUISITES)
	@$(ECHO) Begin linking $@
	-$(RM) $(@:.dll=.pdb)
	$(file >$(OUTPUTDIR)/$(VFC_PLUGIN_LINK_PARAMETERS_FILE), $(vfc_plugin_linker_flags))
	$(call call_linker_print_params_on_verbose,$(OUTPUTDIR_ABSOLUTE)/$(VFC_PLUGIN_LINK_PARAMETERS_FILE))
	$(LINK) @$(OUTPUTDIR)/$(VFC_PLUGIN_LINK_PARAMETERS_FILE)
	@$(ECHO) Done linking $@

    $(eval $(call NV_TARGET_ALSO_UPDATES_RULE,$(OUTPUTDIR)/$(VFC_PLUGIN_BASENAME).dll,$(OUTPUTDIR)/$(VFC_PLUGIN_BASENAME).lib))
    $(eval $(call NV_TARGET_ALSO_UPDATES_RULE,$(OUTPUTDIR)/$(VFC_PLUGIN_BASENAME).dll,$(OUTPUTDIR)/$(VFC_PLUGIN_BASENAME).pdb))
  endif

endif # NVCFG_INITIALIZED
